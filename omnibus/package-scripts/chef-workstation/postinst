#!/bin/sh
#
# Perform necessary setup steps
# after package is installed.
#

PROGNAME=`basename $0`
INSTALLER_DIR=/opt/chef-workstation

error_exit()
{
  echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
  exit 1
}

is_darwin()
{
  uname -v | grep "^Darwin" 2>&1 >/dev/null
}

if is_darwin; then
    PREFIX="/usr/local"
    mkdir -p "$PREFIX/bin"
else
    PREFIX="/usr"
fi

# TODO - pull from components/*/bin/*?
# We test for the presence of /usr/bin/chef-client to know if this script succeeds,
# so chef-client must appear as the last item here.
chefdk_binaries="berks chef chef-apply chef-shell chef-solo chef-vault cookstyle dco delivery foodcritic inspec kitchen knife ohai push-apply pushy-client pushy-service-manager chef-client"
binaries="chef-run chefx $chefdk_binaries"

for binary in $binaries; do
  ln -sf $INSTALLER_DIR/bin/$binary $PREFIX/bin || error_exit "Cannot link $binary to $PREFIX/bin"
done

# Our chef-tray installer is in INSTALLER_DIR/installers; it will have only the package
# for this platform, eg chef_tray.msi/deb/rpm/dmg
# MSI handling will be done in the installer itself, since this script is only run for mac and linux packages.
# if is_darwin; then
#   cp -rf "chef-workstation.app" "/Applications"
# elif [ -f $INSTALLER_DIR/installers/chef-tray.rpm ]; then
#   rpm -Uvh "$INSTALLER_DIR/installers/chef-tray.rpm"
# elif [ -f $INSTALLER_DIR/installers/chef-tray.deb ]; then
#   dpkg -i "$INSTALLER_DIR/installers/chef-tray.deb"
# fi


echo "Thank you for installing Chef Workstation!"
echo "You can find some tips on getting started at https://chef.sh/"

exit 0
