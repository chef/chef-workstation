#!/bin/sh

#
# Copyright:: Copyright (c) 2020 Chef Software Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Perform necessary setup steps
# after package is installed.
#

PROGNAME=`basename $0`
INSTALLER_DIR=/opt/chef-workstation

error_exit()
{
  echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
  exit 1
}

is_darwin()
{
  uname -a | grep "^Darwin" 2>&1 >/dev/null
}

if is_darwin; then
    PREFIX="/usr/local"
    mkdir -p "$PREFIX/bin"
else
    PREFIX="/usr"
fi


hab_target_path="$PREFIX/bin/hab"
if [ -L "$hab_target_path" ]; then
  # If the link exists, always remove it because we replace it later in script anyway.
  loc=$(readlink "$hab_target_path")
  case $loc in
    *chef-workstation*)
      # We own this path, so we're not taking it over from another install.
      ;;
    *)
      takeover="1"
  esac
elif [ -f "$hab_target_path" ]; then
  # Preserve the original target path
  mv "$hab_target_path" "$hab_target_path.orig"
  takeover="1"
  moved="1"
fi

if [ "$takeover" = "1" ]; then
  echo ""
  echo "NOTE: Chef Habitat on this node is now managed by Chef Workstation."
  echo "      Future Workstation updates will always include the latest stable"
  echo "      Habitat release."
  echo ""
fi

if [ "$moved" = "1" ]; then
  echo "      Original habitat binary has been moved to '$hab_target_path.orig'"
  echo ""
fi

binaries="chef-run berks chef chef-cli chef-analyze chef-apply chef-shell chef-solo chef-vault cookstyle delivery foodcritic inspec kitchen knife ohai chef-client hab chef-zero mixlib-install fauxhai"
for binary in $binaries; do
  ln -sf "$INSTALLER_DIR/bin/$binary" $PREFIX/bin || error_exit "Cannot link $binary to $PREFIX/bin"
done

if is_darwin; then
  # the app launcher comes from the chef-workstation-app repo, here we are just using
  # it to start the app as a service on MacOS systems, it will start at boot
  app_launcher=chef_workstation_app_launcher

  # Close the app if it is running.
  if [ $(osascript -e 'application "Chef Workstation App" is running') = 'true' ]; then
    echo "Closing Chef Workstation App..."
    osascript -e 'quit app "Chef Workstation App"' > /dev/null 2>&1;
  fi
  # chef-workstation-app is configured to build Mac as a zip file instead
  # of a directory. Otherwise, the mac pkgbuild command will find the Chef Workstation App
  # within the larger Chef Workstation package, and will not include it in the Chef Workstation
  # package directly.
  echo "Moving Chef Workstation App to the Applications folder"
  pushd "$INSTALLER_DIR/components/chef-workstation-app"
  # https://github.com/electron-userland/electron-builder/issues/3779
  # https://github.com/electron-userland/electron-builder/issues/4299#issuecomment-544997415
  ditto -x -k -V chef-workstation-app-mac.zip ./
  sudo rm -rf "/Applications/Chef Workstation App.app"
  sudo mv "Chef Workstation App.app" /Applications/
  mv "/Applications/Chef Workstation App.app/Contents/Resources/assets/scripts/$app_launcher" $INSTALLER_DIR/bin || error_exit "Cannot move $app_launcher to $INSTALLER_DIR/bin"
  rm -rf "$INSTALLER_DIR/components"
  popd

  ln -sf $INSTALLER_DIR/bin/uninstall_chef_workstation $PREFIX/bin || error_exit "Cannot link uninstall_chef_workstation to $PREFIX/bin"

  echo "Setting Chef Workstation App to run at boot..."
  su "$USER" $INSTALLER_DIR/bin/$app_launcher load

  echo "Launching Chef Workstation App..."
  osascript -e 'open app "Chef Workstation App"' > /dev/null 2>&1;
else # linux - postinst does not run for windows.
  cwa_app_path="$INSTALLER_DIR/components/chef-workstation-app/chef-workstation-app"
  ldd "$cwa_app_path" | grep "not found" >/dev/null 2>&1
  # 0 rc means grep found 'not found' text - and we have missing deps.
  if [ $? -eq 0 ]; then
    echo ""
    echo "Chef Workstation ships with a toolbar application, the Chef Workstation App."
    echo "To run this application some additional dependencies must be installed."
    echo "Using your platform's package manager to install the 'electron' package is "
    echo "the easiest way to meet the dependency requirements."
    echo ""
    echo "You can then launch the App by running 'chef-workstation-app'."
    echo "The App will then be available in the system tray."
  else
    echo ""
    echo "The Chef Workstation App is available."
    echo ""
    echo "Launch the App by running 'chef-workstation-app'."
    echo "The App will then be available in the system tray."
  fi
  ln -sf $cwa_app_path $PREFIX/bin
fi


echo "touch ruby-script.rb"

$INSTALLER_DIR/embedded/bin/bundle exec ruby $INSTALLER_DIR/bin/ruby-env-script.rb $INSTALLER_DIR/ruby-env.json

# where do i store this script and how to i add code to this script


echo ""
echo "Thank you for installing Chef Workstation!"
echo "You can find some tips on getting started at https://docs.chef.io/workstation/getting_started/"
echo ""
exit 0
